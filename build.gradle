plugins {
    id 'org.springframework.boot' version '2.5.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "com.bmuschko.docker-remote-api" version "7.1.0"
    //id "com.dorongold.task-tree" version "2.1.0"
}

apply from: "$rootDir/gradle/versioning.gradle"

group = 'ch.so.agi.ilivalidator'

description = """ilivalidator web service"""

sourceCompatibility = '11'
targetCompatibility = '11'

sourceSets {
    dockerTest {
        java.srcDir "$projectDir/src/dockerTest/java"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {    
    dockerTestImplementation.extendsFrom testImplementation
    dockerTestRuntime.extendsFrom testRuntime    
}

repositories {
    mavenCentral()
    maven { url "http://jars.interlis.ch/"; allowInsecureProtocol true }
}

configurations.all {
    resolutionStrategy {
        force 'ch.interlis:ili2c-tool:5.2.3'
        force 'ch.interlis:ili2c-core:5.2.3'    
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'commons-io:commons-io:2.6'  
    implementation 'ch.interlis:ilivalidator:1.11.14-SNAPSHOT'
    implementation 'io.github.sogis:ilivalidator-custom-functions:1.1.47'
    implementation "org.jgrapht:jgrapht-core:1.3.1" // for custom functions
    implementation 'ch.interlis:ili2db:4.3.2' // for custom functions
    implementation platform('software.amazon.awssdk:bom:2.15.33')
    implementation 'software.amazon.awssdk:s3'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.jsoup:jsoup:1.12.1' 
    dockerTestImplementation sourceSets.test.output          
}

test {
    useJUnitPlatform()
    failFast = true
    testLogging {
        showStandardStreams = true
    }   
}

task deleteFilesJarDir(type: Delete) {
    delete fileTree("${buildDir}/dependency/")
    delete file("${buildDir}/dependency/")
}

task unzipJar(type: Copy) {
    from zipTree(file("${buildDir}/libs/ilivalidator-web-service-websocket-"+version+".jar"))
    into file("${buildDir}/dependency/")
}
unzipJar.dependsOn(deleteFilesJarDir)
bootJar.finalizedBy(unzipJar)

task dockerTest(type: Test) {
    description = 'Runs the docker tests.'
    group = 'verification'
    
    useJUnitPlatform()
    testClassesDirs = sourceSets.dockerTest.output.classesDirs
    classpath = sourceSets.dockerTest.runtimeClasspath    
    outputs.upToDateWhen { false }
    mustRunAfter test
}

// Sonst wird dockerTest auch ausgeführt, wenn man 'build' ausführt.
//check.dependsOn dockerTest

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerLogsContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer.ExposedPort
import java.text.SimpleDateFormat

docker {
    registryCredentials {
        username = System.env.DOCKER_USERNAME
        password = System.env.DOCKER_PASSWORD
    }
}

task pullDockerImage(type: DockerPullImage) {
    description = "Pull docker image."
    image = "sogis/ilivalidator-web-service:latest"
}

task buildDockerImage(dependsOn: 'pullDockerImage', type: DockerBuildImage) {
    description = "Build docker image."
    inputDir = project.rootDir
    cacheFrom.add("sogis/ilivalidator-web-service:latest")    
    images.add("sogis/ilivalidator-web-service:"+version.toString())
    images.add("sogis/ilivalidator-web-service:latest")
    labels = ["ilivalidator-web-service.created": new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()), 
            "ilivalidator-web-service.git_commit": getCheckedOutGitCommitHash(), 
            "ilivalidator-web-service.build": version.toString()]
}

task createDockerContainer(dependsOn: 'buildDockerImage', type: DockerCreateContainer) {
    description = "Create docker container."
    targetImageId buildDockerImage.getImageId() 
    hostConfig.portBindings = ['8888:8888']
    exposedPorts = [new ExposedPort("tcp", [8888])]
    withEnvVar('AWS_ACCESS_KEY_ID', System.getenv('AWS_ACCESS_KEY_ID') ?: 'foo')
    withEnvVar('AWS_SECRET_ACCESS_KEY', System.getenv('AWS_SECRET_ACCESS_KEY') ?: 'bar')   
}

task startDockerContainer(dependsOn: 'createDockerContainer', type: DockerStartContainer) { 
    description = "Start docker container."
    targetContainerId createDockerContainer.getContainerId() 

    // Starting container != web service is ready.
    doLast { 
        sleep(10*1000)
    }
}

task stopDockerContainer(type: DockerStopContainer) {
    description = "Stop running docker container."
    targetContainerId createDockerContainer.getContainerId()
}

task pushDockerImages(type: DockerPushImage) {
    description = "Push docker images to hub.docker.com"
    images.add("sogis/ilivalidator-web-service:"+version.toString())
    images.add("sogis/ilivalidator-web-service:latest")
}

dockerTest.dependsOn('startDockerContainer')
dockerTest.finalizedBy('stopDockerContainer')

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

task versionTxt()  {
    outputs.upToDateWhen { false }
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${getCheckedOutGitCommitHash()}
Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
Application-name: ilivalidator-web-service
"""
    }
}
task copyVersionTxt(type: Copy) {
    from "version.txt"
    into "src/main/resources/static/"
}
copyVersionTxt.dependsOn(versionTxt)
processResources.dependsOn(copyVersionTxt)