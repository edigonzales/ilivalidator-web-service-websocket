plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    //id 'com.google.cloud.tools.jib' version '3.2.1'
    //id "com.bmuschko.docker-remote-api" version "7.1.0"
    //id "com.dorongold.task-tree" version "2.1.0"
}

apply plugin: 'io.spring.dependency-management'
apply from: "$rootDir/gradle/versioning.gradle"

group = 'ch.so.agi.ilivalidator'

description = """ilivalidator web service"""

sourceCompatibility = '11'
targetCompatibility = '11'

compileJava {
    options.compilerArgs.addAll(['--release', '11'])
}

bootJar {
   archiveName = baseName + "-" + version + "-exec.jar"
}

sourceSets {
    dockerTest {
        java.srcDir "$projectDir/src/dockerTest/java"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {    
    dockerTestImplementation.extendsFrom testImplementation
    dockerTestRuntime.extendsFrom testRuntime    
}

repositories {
    mavenCentral()
    maven { url "https://jars.interlis.ch/" }
}

configurations.all {
    resolutionStrategy {
        force 'ch.interlis:ili2c-tool:5.2.3'
        force 'ch.interlis:ili2c-core:5.2.3'    
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'commons-io:commons-io:2.6'  
    implementation 'ch.interlis:ilivalidator:1.11.15-SNAPSHOT'
    implementation 'io.github.sogis:ilivalidator-custom-functions:1.1.47'
    implementation "org.jgrapht:jgrapht-core:1.3.1" // for custom functions FIXME braucht es nicht mehr, da custom function normale dependency
    implementation 'ch.interlis:ili2db:4.3.2' // for custom functions FIXME braucht es nicht mehr, da custom function normale dependency
    implementation platform('software.amazon.awssdk:bom:2.15.33')
    implementation 'software.amazon.awssdk:s3'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.jsoup:jsoup:1.12.1'
    testImplementation 'org.testcontainers:testcontainers:1.17.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.17.3' 
    dockerTestImplementation sourceSets.test.output          
}

tasks.named('test') {
    useJUnitPlatform()
    failFast = true
    testLogging {
        showStandardStreams = true
    }   
}

task buildImage(type: Exec) {
    workingDir "$projectDir"
    commandLine 'docker', 'build',
                '--no-cache', '--force-rm',
                '-t', "sogis/ilivalidator-web-service:latest",
                '-f', 'Dockerfile',  '.'
}

task dockerTest(type: Test) {
    description = 'Runs the docker tests.'
    group = 'verification'
    
    useJUnitPlatform()
    testClassesDirs = sourceSets.dockerTest.output.classesDirs
    classpath = sourceSets.dockerTest.runtimeClasspath    
    outputs.upToDateWhen { false }
    mustRunAfter test
}

import java.text.SimpleDateFormat

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

task versionTxt()  {
    outputs.upToDateWhen { false }
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${getCheckedOutGitCommitHash()}
Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
Application-name: ilivalidator-web-service
"""
    }
}
task copyVersionTxt(type: Copy) {
    from "version.txt"
    into "src/main/resources/static/"
}
copyVersionTxt.dependsOn(versionTxt)
processResources.dependsOn(copyVersionTxt)